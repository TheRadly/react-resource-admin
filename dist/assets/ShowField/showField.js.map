{"version":3,"file":"showField.js","names":["_react","_interopRequireWildcard","require","_showFieldWrapper","_interopRequireDefault","_image","_imageWrapper","_useShowField","_arrayFieldsWrapper","_arrayField","_jsxRuntime","obj","__esModule","default","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","LOGO","ShowField","_ref","item","label","arrayTitle","emptyLabel","value","field","isArray","correctValue","parsedArrayValues","useShowField","jsxs","children","jsx","Array","ArrayFieldsWrapper","map","_ref2","pF","pV","title","pT","ArrayFieldWrapper","values","cv","Image","src","alt","width","preview","_default","memo","exports"],"sources":["../../../src/assets/ShowField/showField.tsx"],"sourcesContent":["import React from \"react\";\nimport ShowFieldWrapper from \"./styled/showFieldWrapper\";\nimport { Image } from \"primereact/image\";\nimport ImageWrapper from \"./styled/imageWrapper\";\nimport useShowField from \"./talons/useShowField\";\nimport { memo } from \"react\";\nimport {\n  ArrayFieldWrapper,\n  ArrayFieldsWrapper,\n} from \"./styled/arrayFieldsWrapper\";\nimport { DataFieldType } from \"../../types/InputEventTypes\";\nimport ArrayField from \"./arrayField\";\n\ninterface ShowFieldProps {\n  item: DataFieldType;\n  label: string;\n  arrayTitle: string;\n  emptyLabel: string;\n}\n\nconst LOGO = \"logo\";\n\nconst ShowField = ({ item, label, arrayTitle, emptyLabel }: ShowFieldProps) => {\n  const { value, field, isArray } = item;\n\n  const { correctValue, parsedArrayValues } = useShowField({\n    value,\n    isArray,\n    arrayTitle,\n    emptyLabel,\n  });\n\n  return (\n    <ShowFieldWrapper>\n      <span>{label}</span>\n      {isArray &&\n        field !== LOGO &&\n        (Array.isArray(parsedArrayValues) ? (\n          <ArrayFieldsWrapper>\n            {parsedArrayValues.map(\n              ({ field: pF, value: pV, title: pT }: DataFieldType) => (\n                <ArrayFieldWrapper>\n                  <p>{pF}</p>\n                  <ArrayField title={pT} values={pV} />\n                </ArrayFieldWrapper>\n              )\n            )}\n          </ArrayFieldsWrapper>\n        ) : (\n          parsedArrayValues\n        ))}\n      {!isArray &&\n        field !== LOGO &&\n        (Array.isArray(correctValue) ? (\n          <ArrayFieldsWrapper>\n            {correctValue.map((cv) => (\n              <ArrayFieldWrapper>\n                <p>{cv.field}</p>\n                <span>{cv.value}</span>\n              </ArrayFieldWrapper>\n            ))}\n          </ArrayFieldsWrapper>\n        ) : (\n          correctValue\n        ))}\n      {field === LOGO && (\n        <ImageWrapper>\n          <Image src={value} alt={field} width=\"150\" preview />\n        </ImageWrapper>\n      )}\n    </ShowFieldWrapper>\n  );\n};\n\nexport default memo(ShowField);\n"],"mappings":"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"}