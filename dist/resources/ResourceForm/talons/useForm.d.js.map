{"version":3,"file":"useForm.d.js","names":[],"sources":["../../../../src/resources/ResourceForm/talons/useForm.d.ts"],"sourcesContent":["/// <reference types=\"react\" />\ninterface UseFormProps {\n    initialValues?: any;\n    onSubmitMethod: any;\n}\ndeclare const useForm: ({ initialValues, onSubmitMethod, }: UseFormProps) => {\n    formHandler: {\n        initialValues: any;\n        initialErrors: import(\"formik\").FormikErrors<unknown>;\n        initialTouched: import(\"formik\").FormikTouched<unknown>;\n        initialStatus: any;\n        handleBlur: {\n            (e: import(\"react\").FocusEvent<any, Element>): void;\n            <T = any>(fieldOrEvent: T): T extends string ? (e: any) => void : void;\n        };\n        handleChange: {\n            (e: import(\"react\").ChangeEvent<any>): void;\n            <T_1 = string | import(\"react\").ChangeEvent<any>>(field: T_1): T_1 extends import(\"react\").ChangeEvent<any> ? void : (e: string | import(\"react\").ChangeEvent<any>) => void;\n        };\n        handleReset: (e: any) => void;\n        handleSubmit: (e?: import(\"react\").FormEvent<HTMLFormElement> | undefined) => void;\n        resetForm: (nextState?: Partial<import(\"formik\").FormikState<any>> | undefined) => void;\n        setErrors: (errors: import(\"formik\").FormikErrors<any>) => void;\n        setFormikState: (stateOrCb: import(\"formik\").FormikState<any> | ((state: import(\"formik\").FormikState<any>) => import(\"formik\").FormikState<any>)) => void;\n        setFieldTouched: (field: string, touched?: boolean | undefined, shouldValidate?: boolean | undefined) => Promise<void> | Promise<import(\"formik\").FormikErrors<any>>;\n        setFieldValue: (field: string, value: any, shouldValidate?: boolean | undefined) => Promise<void> | Promise<import(\"formik\").FormikErrors<any>>;\n        setFieldError: (field: string, value: string | undefined) => void;\n        setStatus: (status: any) => void;\n        setSubmitting: (isSubmitting: boolean) => void;\n        setTouched: (touched: import(\"formik\").FormikTouched<any>, shouldValidate?: boolean | undefined) => Promise<void> | Promise<import(\"formik\").FormikErrors<any>>;\n        setValues: (values: any, shouldValidate?: boolean | undefined) => Promise<void> | Promise<import(\"formik\").FormikErrors<any>>;\n        submitForm: () => Promise<any>;\n        validateForm: (values?: any) => Promise<import(\"formik\").FormikErrors<any>>;\n        validateField: (name: string) => Promise<void> | Promise<string | undefined>;\n        isValid: boolean;\n        dirty: boolean;\n        unregisterField: (name: string) => void;\n        registerField: (name: string, { validate }: any) => void;\n        getFieldProps: (nameOrOptions: string | import(\"formik\").FieldConfig<any>) => import(\"formik\").FieldInputProps<any>;\n        getFieldMeta: (name: string) => import(\"formik\").FieldMetaProps<any>;\n        getFieldHelpers: (name: string) => import(\"formik\").FieldHelperProps<any>;\n        validateOnBlur: boolean;\n        validateOnChange: boolean;\n        validateOnMount: boolean;\n        values: any;\n        errors: import(\"formik\").FormikErrors<any>;\n        touched: import(\"formik\").FormikTouched<any>;\n        isSubmitting: boolean;\n        isValidating: boolean;\n        status?: any;\n        submitCount: number;\n    };\n    formValues: any;\n    values: {\n        field: string;\n        value: any;\n    }[];\n    setFieldValue: (field: string, value: any, shouldValidate?: boolean | undefined) => Promise<void> | Promise<import(\"formik\").FormikErrors<any>>;\n    handleChangeField: (value: string | number | boolean, field: string) => void;\n    handleSubmit: (e?: import(\"react\").FormEvent<HTMLFormElement> | undefined) => void;\n};\nexport default useForm;\n"],"mappings":""}